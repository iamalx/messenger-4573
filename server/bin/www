#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require("dotenv").config();

/**
 * Module dependencies.
 */

const { app, sessionStore } = require("../app");
const http = require("http");
const db = require("../db");
const onlineUsers = require("../onlineUsers");
const onlineUserSockets = require("../onlineUserSockets");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces, and sync database.
 */

const io = require("socket.io")(server);


io.on("connection", (socket)  => {
  // console.log(socket)
  // console.log('app,', app)
  let userId = null;
  console.log('onConnect', userId);

  socket.on("go-online", (id) => {
    console.log('online,',id)
    // console.log()
    userId = id;
    if (!onlineUsers.includes(id)) {
      onlineUsers.push(id);
    }
    if (!onlineUserSockets[id]) {
      onlineUserSockets[id] = [];
      console.log('socket')
    }
    onlineUserSockets[id].push(socket.id);
    console.log(onlineUserSockets)
    socket.join('online');

    // send the user who just went online to everyone else who is already online
    socket.broadcast.to('online').emit("add-online-user", id);
    // socket.broadcast.emit("add-online-user", id);
  });

  socket.on('join-room', (id) => {   
    // add user to room with ID to send message if they are the reciver when "new-message" is emited   
    socket.join(id.toString());
  })

  socket.on("new-message", (data) => {
    const recipientId = data.recipientId.toString();

    // send message to user/room if they are the receiver
    socket.broadcast
      .to(recipientId)
      .emit('new-message', 
        { 
          message: data.message,
          sender: data.sender,
        }
      );
  });

  socket.on("logout", (id) => {
    if (onlineUsers.includes(id)) {
      const userIndex = onlineUsers.indexOf(id);
      onlineUsers.splice(userIndex, 1);
      console.log('logout', id)
      removeOfflineSocket(id);
    
      // socket.broadcast.emit("remove-offline-user", id);
      // z
    }
  });

  socket.on("disconnect", (id) => {
    console.log('disconnected user', userId)
    if(userId) 
    removeOfflineSocket(userId)
  });

  function removeOfflineSocket(id) {
    console.log(onlineUserSockets, 'if in')
    if(!(id in onlineUserSockets)) 
      return;
    
    const userIndexLs =  onlineUserSockets[id].indexOf(socket.id);
    onlineUserSockets[id].splice(userIndexLs, 1);
    console.log(onlineUserSockets, 'pre')
    if( onlineUserSockets[id].length === 0) {
      delete onlineUserSockets[id];

      socket.leave(id.toString()); 
      socket.broadcast.to('online').emit("remove-offline-user", id);
      socket.leave('online')

      
      console.log(onlineUserSockets, 'post')
      // socket.disconnect();
    }
  }
});

sessionStore
  .sync()
  .then(() => db.sync())
  .then(() => {
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log("Listening on " + bind);
}
